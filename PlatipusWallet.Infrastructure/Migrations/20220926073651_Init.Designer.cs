// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlatipusWallet.Infrastructure.Persistence;

#nullable disable

namespace PlatipusWallet.Infrastructure.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    [Migration("20220926073651_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Award", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Awards", (string)null);
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Casino", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("SignatureKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Casinos", (string)null);
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.CasinoCurrencies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CasinoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CasinoId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CasinoCurrencies", (string)null);
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.ErrorMock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HttpStatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("MethodPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("ErrorMocks", (string)null);
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Round", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rounds", (string)null);
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("RoundId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("CasinoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CasinoId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Award", b =>
                {
                    b.HasOne("PlatipusWallet.Domain.Entities.User", "User")
                        .WithMany("Awards")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.CasinoCurrencies", b =>
                {
                    b.HasOne("PlatipusWallet.Domain.Entities.Casino", "Casino")
                        .WithMany("CasinoCurrencies")
                        .HasForeignKey("CasinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatipusWallet.Domain.Entities.Currency", "Currency")
                        .WithMany("CasinoCurrencies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Casino");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.ErrorMock", b =>
                {
                    b.HasOne("PlatipusWallet.Domain.Entities.Session", "Session")
                        .WithOne("ErrorMock")
                        .HasForeignKey("PlatipusWallet.Domain.Entities.ErrorMock", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Round", b =>
                {
                    b.HasOne("PlatipusWallet.Domain.Entities.User", "User")
                        .WithMany("Rounds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Session", b =>
                {
                    b.HasOne("PlatipusWallet.Domain.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("PlatipusWallet.Domain.Entities.Round", "Round")
                        .WithMany("Transactions")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.User", b =>
                {
                    b.HasOne("PlatipusWallet.Domain.Entities.Casino", "Casino")
                        .WithMany("Users")
                        .HasForeignKey("CasinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatipusWallet.Domain.Entities.Currency", "Currency")
                        .WithMany("Users")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Casino");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Casino", b =>
                {
                    b.Navigation("CasinoCurrencies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Currency", b =>
                {
                    b.Navigation("CasinoCurrencies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Round", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.Session", b =>
                {
                    b.Navigation("ErrorMock");
                });

            modelBuilder.Entity("PlatipusWallet.Domain.Entities.User", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Rounds");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
